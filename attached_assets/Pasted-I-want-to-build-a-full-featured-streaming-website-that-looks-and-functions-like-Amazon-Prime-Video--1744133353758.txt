I want to build a full-featured streaming website that looks and functions like Amazon Prime Video. The platform should use the Vidsrc API to fetch and embed movies, TV shows, and episodes dynamically. The user interface should be clean, modern, and highly responsive, closely mimicking the visual experience and layout of Amazon Prime, including a home page with carousels for featured content, latest movies, latest TV shows, and latest episodes. Each item should be clickable and take users to a detailed content page with full descriptions, poster images, and a playable embedded video using Vidsrc’s embed endpoints.

For movies, the player should be embedded using either the IMDB or TMDB ID with this base endpoint: https://vidsrc.xyz/embed/movie. Optional parameters should include ds_lang to set the default subtitle language, and sub_url for loading subtitles from an external .srt or .vtt file. For TV shows, the embed should use: https://vidsrc.xyz/embed/tv, again supporting IMDB or TMDB IDs. Episode-level embedding must also be supported, using endpoints like https://vidsrc.xyz/embed/tv?imdb=ttXXXXXXX&season=1&episode=1, and the layout should allow users to select seasons and episodes easily from a TV show’s detail page.

The system should include an automated content-fetching feature. This feature should pull the latest movies, TV shows, and episodes from the JSON APIs provided by Vidsrc (e.g., https://vidsrc.xyz/movies/latest/page-1.json, https://vidsrc.xyz/tvshows/latest/page-1.json, etc.). A scheduled job should regularly fetch new content from these sources and store it in the local database. This will eliminate the need for manual entry and ensure the site stays up to date with the latest releases. The backend should support pagination for large content collections, categorization (e.g., genres, popularity), and storing additional metadata like descriptions, thumbnails, and release dates (which can be pulled from the TMDB API if needed).

Additionally, I want an admin panel to manage the fetched content, where admins can view, feature, or hide content, edit metadata, and possibly see simple analytics like content views or click stats. Users should also be able to search for content by title, which will either filter the local content or use the TMDB API to find the relevant IMDB/TMDB ID and then embed it using Vidsrc. The website should support features like "Add to Watchlist," "Recently Watched," and possibly "Trending Now." It should also offer subtitle options via the ds_lang or external sub_url parameters where applicable.

The frontend can be built with React.js using Tailwind CSS or Material UI, while the backend can be built in Node.js, Django, or Laravel depending on the developer's preference. MongoDB or PostgreSQL can be used for the database. The site should be SEO-friendly, mobile-responsive, and scalable. It would also be beneficial to deploy the frontend on Vercel or Netlify and the backend on Render, Railway, or a VPS. The final system should provide a smooth streaming experience with embedded video, proper categorization, automated content fetching, and admin control — all styled and organized like a professional streaming platform similar to Amazon Prime Video.